import numpy as np

def extract_rotation(start, destination):
    """
    Extracts a Vec3 containing the rotation from a vector start to a vector destination.
    
    Parameters:
    - start: A numpy array representing the start vector.
    - destination: A numpy array representing the destination vector.
    
    Returns:
    - A numpy array representing the rotation vector (Euler angles) required to rotate
      'start' vector to align with 'destination' vector.
    """
    # Normalize the start and destination vectors
    start_norm = start / np.linalg.norm(start)
    destination_norm = destination / np.linalg.norm(destination)
    
    # Calculate the cross product and angle between the two vectors
    cross_prod = np.cross(start_norm, destination_norm)
    dot_prod = np.dot(start_norm, destination_norm)
    angle = np.arccos(dot_prod)
    
    # Normalize the cross product to get the rotation axis
    rotation_axis = cross_prod / np.linalg.norm(cross_prod)
    
    # Convert the rotation axis and angle to Euler angles (assuming here a simple conversion)
    # Note: This step is highly dependent on the specific use case and might need adjustments
    # for different conventions or more complex rotations.
    rotation_euler = rotation_axis * angle
    
    return rotation_euler

# Example usage
start_vec = np.array([1, 0, 0])
destination_vec = np.array([0, 1, 0])
rotation = extract_rotation(start_vec, destination_vec)
print("Rotation (Euler angles):", rotation)
